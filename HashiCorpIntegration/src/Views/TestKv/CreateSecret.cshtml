@using HashiCorpIntegration.src.Models
@model KvCreateUpdateViewModel
@{
    ViewData["Title"] = Model.IsUpdate ? "Update Secret" : "Create Secret";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-md-10 mx-auto">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4 class="card-title mb-0">
                        <i class="fas @(Model.IsUpdate ? "fa-edit" : "fa-plus")"></i> 
                        @(Model.IsUpdate ? "Update Secret" : "Create New Secret")
                    </h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(Model.Error))
                    {
                        <div class="alert alert-danger">
                            <i class="fas fa-exclamation-circle"></i> @Model.Error
                        </div>
                    }

                    <form asp-action="CreateSecret" method="post" id="secretForm">
                        <div class="form-group mb-3">
                            <label for="Path" class="form-label">Secret Path *</label>
                            <input asp-for="Path" class="form-control" placeholder="e.g., kv/myapp/config" 
                                   @(Model.IsUpdate ? "readonly" : "") required>
                            <div class="form-text">
                                Path where the secret will be stored (e.g., kv/myapp/config)
                            </div>
                            <span asp-validation-for="Path" class="text-danger"></span>
                        </div>

                        <input asp-for="IsUpdate" type="hidden" />

                        <div class="card">
                            <div class="card-header d-flex justify-content-between align-items-center">
                                <h6 class="mb-0">
                                    <i class="fas fa-list"></i> Key-Value Pairs
                                </h6>
                                <button type="button" class="btn btn-sm btn-outline-primary" onclick="addKeyValuePair()">
                                    <i class="fas fa-plus"></i> Add Row
                                </button>
                            </div>
                            <div class="card-body">
                                <div id="keyValueContainer">
                                    @for (int i = 0; i < Model.KeyValuePairs.Count; i++)
                                    {
                                        <div class="row mb-3 key-value-row">
                                            <div class="col-md-4">
                                                <input asp-for="KeyValuePairs[i].Key" class="form-control" placeholder="Key" />
                                            </div>
                                            <div class="col-md-6">
                                                <input asp-for="KeyValuePairs[i].Value" class="form-control" placeholder="Value" />
                                            </div>
                                            <div class="col-md-2">
                                                <button type="button" class="btn btn-outline-danger" onclick="removeKeyValuePair(this)"
                                                        title="Remove this key-value pair">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    }
                                </div>
                                
                                <div class="text-muted small">
                                    <i class="fas fa-info-circle"></i>
                                    Add key-value pairs for your secret. Empty rows will be ignored.
                                </div>
                            </div>
                        </div>

                        <div class="form-group mt-4 text-center">
                            <button type="submit" class="btn btn-success btn-lg">
                                <i class="fas @(Model.IsUpdate ? "fa-save" : "fa-plus")"></i>
                                @(Model.IsUpdate ? "Update Secret" : "Create Secret")
                            </button>
                            <a href="@Url.Action("Index")" class="btn btn-secondary btn-lg ms-3">
                                <i class="fas fa-times"></i> Cancel
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let keyValueIndex = @Model.KeyValuePairs.Count;

    function addKeyValuePair() {
        const container = document.getElementById('keyValueContainer');
        const newRow = document.createElement('div');
        newRow.className = 'row mb-3 key-value-row';
        newRow.innerHTML = `
            <div class="col-md-4">
                <input name="KeyValuePairs[${keyValueIndex}].Key" class="form-control" placeholder="Key" />
            </div>
            <div class="col-md-6">
                <input name="KeyValuePairs[${keyValueIndex}].Value" class="form-control" placeholder="Value" />
            </div>
            <div class="col-md-2">
                <button type="button" class="btn btn-outline-danger" onclick="removeKeyValuePair(this)"
                        title="Remove this key-value pair">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        `;
        container.appendChild(newRow);
        keyValueIndex++;
    }

    function removeKeyValuePair(button) {
        const row = button.closest('.key-value-row');
        const container = document.getElementById('keyValueContainer');
        
        // Don't remove if it's the last row
        if (container.children.length > 1) {
            row.remove();
            updateIndices();
        }
    }

    function updateIndices() {
        const rows = document.querySelectorAll('.key-value-row');
        rows.forEach((row, index) => {
            const keyInput = row.querySelector('input[name*=".Key"]');
            const valueInput = row.querySelector('input[name*=".Value"]');
            
            if (keyInput) keyInput.name = `KeyValuePairs[${index}].Key`;
            if (valueInput) valueInput.name = `KeyValuePairs[${index}].Value`;
        });
        keyValueIndex = rows.length;
    }

    // Validate form before submission
    document.getElementById('secretForm').addEventListener('submit', function(e) {
        const keyInputs = document.querySelectorAll('input[name*=".Key"]');
        let hasValidPair = false;
        
        keyInputs.forEach(input => {
            if (input.value.trim()) {
                hasValidPair = true;
            }
        });
        
        if (!hasValidPair) {
            e.preventDefault();
            alert('Please add at least one key-value pair.');
        }
    });
</script>

<link href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">